

## Widgets #
> Trees
    > Basic trees
        > Child 0
        > Child 1
        > Child 2
        > Child 3
        > Child 4
    > Advanced, with Selectable nodes
        (?)
        [ ] Align label with current X position)
        Hello!
        > Selectable Node 0
        > Selectable Node 1
        > Selectable Node 2
        > Selectable Leaf 3
        > Selectable Leaf 4
        > Selectable Leaf 5
> Collapsing Headers
    
    ## Header #
    
    ## Header with a close button #
> Bullets
    Bullet point 1
    Bullet point 2
    On multiple lines
    Bullet point 3 (two calls)
    Button
> Colored Text
    Pink
    Yellow
    Disabled
> Word Wrapping
    This text should automatically wrap on the edge of the window. The current implementation for text wrapping follows simple rules suitable for English and possibly other languages.
    200 Wrap width
    Test paragraph 1:
    The lazy dog is a good dog. This paragraph is made to fit within 200 pixels. Testing a 1 character word. The quick brown fox jumps over the lazy dog.
    Test paragraph 2:
    aaaaaaaa bbbbbbbb, c cccccccc,dddddddd. d eeeeeeee   ffffffff. gggggggg!hhhhhhhh
> UTF-8 Text
    CJK text will only appears if the font was loaded with the appropriate CJK character ranges. Call io.Font->LoadFromFileTTF() manually to load extra character ranges.
    Hiragana: かきくけこ (kakikukeko)
    Kanjis: 日本語 (nihongo)
    日本語 UTF-8 input
> Images
    Below we are displaying the font texture (which is the only texture we have access to in this demo). Use the 'ImTextureID' type as storage to pass pointers or identifier to your own texture data. Hover the texture for a zoomed view!
    512x64
    And now some textured buttons..
    Pressed 0 times.
> Selectables
    > Basic
        1. I am selectable
        2. I am selectable
        3. I am not selectable
        4. I am selectable
        5. I am double clickable
    > Rendering more text into the same block
        main.c  2,345 bytes
        Hello.cpp 12,345 bytes
        Hello.h  2,345 bytes
    > In columns
        Item 0 Item 1 Item 2
        Item 3 Item 4 Item 5
        Item 6 Item 7 Item 8
        Item 9 Item 10 Item 11
        Item 12 Item 13 Item 14
        Item 15
    > Grid
        Sailor Sailor Sailor Sailor
        Sailor Sailor Sailor Sailor
        Sailor Sailor Sailor Sailor
        Sailor Sailor Sailor Sailor
> Filtered Text Input default decimal hexadecimal uppercase no blank "imgui" letters
    Password input
    password (?)
    password123 password (clear)
> Multi-line Text Input
    [ ] Read-only
Button
[x] checkbox
( ) radio a ( ) radio b (x) radio c
Click Click Click Click Click Click Click
Hover over me - or me
--------------------------------
Value label
bbbb combo
combo scroll
Hello, world! input text (?)
123 - + input int
(?)
0.001000 - + input float
0.100000
0.200000
0.300000
input float3
50 drag int (?)
42% drag int 0..100
1.000 drag float
0.006700 ns drag small float
0 slider int (?)
ratio = 0.123 slider float
0.0000 slider log float
0 deg slider angle
R:255 G:  0 B: 51 color 1
(?)
R:102 G:179 B:  0 A:128 color 2
listbox
(single select)
> Range Widgets
    Min: 10.0 % Max: 90.0 % range
    Min: 100 units Max: 1000 units range int (no bounds)
> Multi-component Widgets
    0.100000
    0.200000
    input float2
    0.100 0.200 drag float2
    0.100 0.200 slider float2
    1 5 drag int2
    1
    5
    input int2
    1 5 slider int2
    0.100000
    0.200000
    0.300000
    input float3
    0.100 0.200 0.300 drag float3
    0.100 0.200 0.300 slider float3
    1 5 100 drag int3
    1
    5
    100
    input int3
    1 5 100 slider int3
    0.100000
    0.200000
    0.300000
    0.440000
    input float4
    0.100 0.200 0.300 0.440 drag float4
    0.100 0.200 0.300 0.440 slider float4
    1
    5
    100
    255
    input int4
    1 5 100 255 drag int4
    1 5 100 255 slider int4
> Vertical Sliders
    0
    0.00
    sec 0.60
    sec 0.35
    sec 0.90
    sec

## Graphs widgets #

## Layout #
> Child regions
    Without border
    Goto
    50
> Widgets Width
    PushItemWidth(100) (?)
    0.000 float
    PushItemWidth(GetWindowWidth() * 0.5f) (?)
    0.000 float
    PushItemWidth(GetContentRegionAvailWidth() * 0.5f) (?)
    0.000 float
    PushItemWidth(-100) (?)
    0.000 float
    PushItemWidth(-1) (?)
    0.000 float
> Basic Horizontal Layout
    (Use ImGui::SameLine() to keep adding items to the right of the preceding item)
    Two items: Hello Sailor
    More spacing: Hello Sailor
    Normal buttons Banana Apple Corniflower
    Small buttons Like this one can fit within a text block.
    Aligned x=150 x=300
    Aligned x=150 x=300
    [ ] My [ ] Tailor [ ] Is [ ] Rich
    Combo 1.000 X 2.000 Y 3.000 Z
    Lists:
    A B
> Groups
    (Using ImGui::BeginGroup()/EndGroup() to layout items. BeginGroup() basically locks the horizontal position. EndGroup() bundles the whole group so that you can use functions such as IsItemHovered() on it.)
    AAA BBB
    CCC
    DDD
    EEE
    ACTION REACTION
    LEVERAGE
    BUZZWORD
    List
> Text Baseline Alignment
    (This is testing the vertical alignment that occurs on text to keep it at the same baseline as widgets. Lines only composed of text or "small" widgets fit in less vertical spaces than lines with normal widgets)
    One
    Two
    Three Hello
    World Banana
    Banana Hello
    World One
    Two
    Three
    HOP Banana Hello
    World Banana
    HOP Hello
    World Banana
    TEST TEST TEST
    Text aligned to Widget Widget Widget Widget
    Button > Node
        Item 0..
        Item 1..
        Item 2..
        Item 3..
        Item 4..
        Item 5..
    > Node Button
        Item 0..
        Item 1..
        Item 2..
        Item 3..
        Item 4..
        Item 5..
    Button Bullet text
    Node Button
> Scrolling
    (Use SetScrollHere() or SetScrollFromPosY() to scroll to a given position.)
    [x] Track Line 50
    Scroll To y = 200 px
    Top
    25%
    Center
    75%
    Bottom
> Horizontal Scrolling
    Horizontal scrolling for a window has to be enabled explicitly via the ImGuiWindowFlags_HorizontalScrollbar flag.
    You may want to explicitly specify content width by calling SetNextWindowContentWidth() before Begin().
    7 Lines
    << Scroll from code >>
> Clipping
    On a per-widget basis we are occasionally clipping text CPU-side if it won't fit in its frame. Otherwise we are doing coarser clipping + passing a scissor rectangle to the renderer. The system is designed to try minimizing both execution and CPU/GPU rendering cost.
    100 100 size
    (Click and drag)

## Popups & Modal windows #

## Columns #

## Filtering #
Filter usage:
  ""         display all lines
  "xxx"      display lines containing "xxx"
  "xxx,yyy"  display lines containing "xxx" or "yyy"
  "-xxx"     hide lines containing "xxx" Filter (inc,-exc)
aaa1.c
bbb1.c
ccc1.c
aaa2.cpp
bbb2.cpp
ccc2.cpp
abc.h
hello, world

## Keyboard, Mouse & Focus #


## Widgets #
> Trees
    > Basic trees
        > Child 0
        > Child 1
        > Child 2
        > Child 3
        > Child 4
    > Advanced, with Selectable nodes
        (?)
        [ ] Align label with current X position)
        Hello!
        > Selectable Node 0
        > Selectable Node 1
        > Selectable Node 2
        > Selectable Leaf 3
        > Selectable Leaf 4
        > Selectable Leaf 5
> Collapsing Headers
    
    ## Header #
    
    ## Header with a close button #
> Bullets
    Bullet point 1
    Bullet point 2
    On multiple lines
    Bullet point 3 (two calls)
    Button
> Colored Text
    Pink
    Yellow
    Disabled
> Word Wrapping
    This text should automatically wrap on the edge of the window. The current implementation for text wrapping follows simple rules suitable for English and possibly other languages.
    200 Wrap width
    Test paragraph 1:
    The lazy dog is a good dog. This paragraph is made to fit within 200 pixels. Testing a 1 character word. The quick brown fox jumps over the lazy dog.
    Test paragraph 2:
    aaaaaaaa bbbbbbbb, c cccccccc,dddddddd. d eeeeeeee   ffffffff. gggggggg!hhhhhhhh
> UTF-8 Text
    CJK text will only appears if the font was loaded with the appropriate CJK character ranges. Call io.Font->LoadFromFileTTF() manually to load extra character ranges.
    Hiragana: かきくけこ (kakikukeko)
    Kanjis: 日本語 (nihongo)
    日本語 UTF-8 input
> Images
    Below we are displaying the font texture (which is the only texture we have access to in this demo). Use the 'ImTextureID' type as storage to pass pointers or identifier to your own texture data. Hover the texture for a zoomed view!
    512x64
    And now some textured buttons..
    Pressed 0 times.
> Selectables
    > Basic
        1. I am selectable
        2. I am selectable
        3. I am not selectable
        4. I am selectable
        5. I am double clickable
    > Rendering more text into the same block
        main.c  2,345 bytes
        Hello.cpp 12,345 bytes
        Hello.h  2,345 bytes
    > In columns
        Item 0 Item 1 Item 2
        Item 3 Item 4 Item 5
        Item 6 Item 7 Item 8
        Item 9 Item 10 Item 11
        Item 12 Item 13 Item 14
        Item 15
    > Grid
        Sailor Sailor Sailor Sailor
        Sailor Sailor Sailor Sailor
        Sailor Sailor Sailor Sailor
        Sailor Sailor Sailor Sailor
> Filtered Text Input default decimal hexadecimal uppercase no blank "imgui" letters
    Password input
    password (?)
    password123 password (clear)
> Multi-line Text Input
    [ ] Read-only
Button
[x] checkbox
( ) radio a ( ) radio b (x) radio c
Click Click Click Click Click Click Click
Hover over me - or me
--------------------------------
Value label
bbbb combo
combo scroll
Hello, world! input text (?)
123 - + input int
(?)
0.001000 - + input float
0.100000
0.200000
0.300000
input float3
50 drag int (?)
42% drag int 0..100
1.000 drag float
0.006700 ns drag small float
0 slider int (?)
ratio = 0.123 slider float
0.0000 slider log float
0 deg slider angle
R:255 G:  0 B: 51 color 1
(?)
R:102 G:179 B:  0 A:128 color 2
listbox
(single select)
> Range Widgets
    Min: 10.0 % Max: 90.0 % range
    Min: 100 units Max: 1000 units range int (no bounds)
> Multi-component Widgets
    0.100000
    0.200000
    input float2
    0.100 0.200 drag float2
    0.100 0.200 slider float2
    1 5 drag int2
    1
    5
    input int2
    1 5 slider int2
    0.100000
    0.200000
    0.300000
    input float3
    0.100 0.200 0.300 drag float3
    0.100 0.200 0.300 slider float3
    1 5 100 drag int3
    1
    5
    100
    input int3
    1 5 100 slider int3
    0.100000
    0.200000
    0.300000
    0.440000
    input float4
    0.100 0.200 0.300 0.440 drag float4
    0.100 0.200 0.300 0.440 slider float4
    1
    5
    100
    255
    input int4
    1 5 100 255 drag int4
    1 5 100 255 slider int4
> Vertical Sliders
    0
    0.00
    sec 0.60
    sec 0.35
    sec 0.90
    sec

## Graphs widgets #

## Layout #
> Child regions
    Without border
    Goto
    50
> Widgets Width
    PushItemWidth(100) (?)
    0.000 float
    PushItemWidth(GetWindowWidth() * 0.5f) (?)
    0.000 float
    PushItemWidth(GetContentRegionAvailWidth() * 0.5f) (?)
    0.000 float
    PushItemWidth(-100) (?)
    0.000 float
    PushItemWidth(-1) (?)
    0.000 float
> Basic Horizontal Layout
    (Use ImGui::SameLine() to keep adding items to the right of the preceding item)
    Two items: Hello Sailor
    More spacing: Hello Sailor
    Normal buttons Banana Apple Corniflower
    Small buttons Like this one can fit within a text block.
    Aligned x=150 x=300
    Aligned x=150 x=300
    [ ] My [ ] Tailor [ ] Is [ ] Rich
    Combo 1.000 X 2.000 Y 3.000 Z
    Lists:
    A B
> Groups
    (Using ImGui::BeginGroup()/EndGroup() to layout items. BeginGroup() basically locks the horizontal position. EndGroup() bundles the whole group so that you can use functions such as IsItemHovered() on it.)
    AAA BBB
    CCC
    DDD
    EEE
    ACTION REACTION
    LEVERAGE
    BUZZWORD
    List
> Text Baseline Alignment
    (This is testing the vertical alignment that occurs on text to keep it at the same baseline as widgets. Lines only composed of text or "small" widgets fit in less vertical spaces than lines with normal widgets)
    One
    Two
    Three Hello
    World Banana
    Banana Hello
    World One
    Two
    Three
    HOP Banana Hello
    World Banana
    HOP Hello
    World Banana
    TEST TEST TEST
    Text aligned to Widget Widget Widget Widget
    Button > Node
        Item 0..
        Item 1..
        Item 2..
        Item 3..
        Item 4..
        Item 5..
    > Node Button
        Item 0..
        Item 1..
        Item 2..
        Item 3..
        Item 4..
        Item 5..
    Button Bullet text
    Node Button
> Scrolling
    (Use SetScrollHere() or SetScrollFromPosY() to scroll to a given position.)
    [x] Track Line 50
    Scroll To y = 200 px
    Top
    25%
    Center
    75%
    Bottom
> Horizontal Scrolling
    Horizontal scrolling for a window has to be enabled explicitly via the ImGuiWindowFlags_HorizontalScrollbar flag.
    You may want to explicitly specify content width by calling SetNextWindowContentWidth() before Begin().
    7 Lines
    << Scroll from code >>
> Clipping
    On a per-widget basis we are occasionally clipping text CPU-side if it won't fit in its frame. Otherwise we are doing coarser clipping + passing a scissor rectangle to the renderer. The system is designed to try minimizing both execution and CPU/GPU rendering cost.
    100 100 size
    (Click and drag)

## Popups & Modal windows #

## Columns #

## Filtering #
Filter usage:
  ""         display all lines
  "xxx"      display lines containing "xxx"
  "xxx,yyy"  display lines containing "xxx" or "yyy"
  "-xxx"     hide lines containing "xxx" Filter (inc,-exc)
aaa1.c
bbb1.c
ccc1.c
aaa2.cpp
bbb2.cpp
ccc2.cpp
abc.h
hello, world

## Keyboard, Mouse & Focus #
